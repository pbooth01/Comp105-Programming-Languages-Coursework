/* {\Tt all.h} for \uscheme 139c */
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <setjmp.h>
#include <ctype.h>
/* shared type definitions 32a */
typedef struct Name *Name;
typedef struct Namelist *Namelist;   /* list of Name */
/* shared type definitions 34c */
typedef struct Reader *Reader;
/* shared type definitions 34f */
typedef struct XDefreader *XDefreader;
/* shared type definitions 35b */
typedef enum Prompts { NO_PROMPTS, STD_PROMPTS } Prompts;
/* shared type definitions 35e */
typedef enum Echo { SILENT, ECHOING } Echo;
/* shared type definitions 38a */
/* definition of [[va_list_box]] 39a */
typedef struct va_list_box {
  va_list ap;
} va_list_box;
typedef void Printer(FILE *output, va_list_box*);
/* shared type definitions 683d */
typedef struct Parlist *Parlist; /* list of Par */
/* shared type definitions (generated by a script) */
typedef struct Par *Par;
typedef enum { ATOM, LIST } Paralt; 
/* type definitions for \uscheme (generated by a script) */
typedef struct Lambda Lambda; 
typedef struct Value Value;
typedef enum { NIL, BOOL, NUM, SYM, PAIR, CLOSURE, PRIMITIVE } Valuealt;

/* type definitions for \uscheme (generated by a script) */
typedef struct Def *Def;
typedef enum { VAL, EXP, DEFINE } Defalt; 
typedef struct Exp *Exp;
typedef enum {
    LITERAL, VAR, SET, IFX, WHILEX, BEGIN, APPLY, LETX, LAMBDAX
} Expalt;

typedef struct XDef *XDef;
typedef enum { DEF, USE, TEST } XDefalt; 
typedef struct UnitTest *UnitTest;
typedef enum { CHECK_EXPECT, CHECK_ERROR } UnitTestalt;

/* type definitions for \uscheme 128b */
typedef enum Letkeyword { LET, LETSTAR, LETREC } Letkeyword;
typedef struct UnitTestlist  *UnitTestlist;  /* list of UnitTest  */
typedef struct Explist  *Explist;            /* list of Exp  */
/* type definitions for \uscheme 128d */
typedef struct Valuelist *Valuelist;     /* list of Value */
typedef Value (Primitive)(Exp e, int tag, Valuelist vl);
/* type definitions for \uscheme 140a */
typedef struct Env *Env;
/* shared structure definitions 686e */
struct Reader {
    char *buf;               /* holds the last line read */
    int nbuf;                /* size of buf */
    int line;                /* current line number */
    const char *readername;  /* identifies this reader */

    FILE *fin;               /* filereader */
    const char *s;           /* stringreader */
};
/* shared structure definitions (generated by a script) */
struct Par { Paralt alt; union { Name atom; Parlist list; } u; }; 
/* structure definitions for \uscheme (generated by a script) */
struct Lambda { Namelist formals; Exp body; }; 
struct Value {
    Valuealt alt;
    union {
        int bool;
        int num;
        Name sym;
        struct { Value *car; Value *cdr; } pair;
        struct { Lambda lambda; Env env; } closure;
        struct { int tag; Primitive *function; } primitive;
    } u;
};

/* structure definitions for \uscheme (generated by a script) */
struct Def {
    Defalt alt;
    union {
        struct { Name name; Exp exp; } val;
        Exp exp;
        struct { Name name; Lambda lambda; } define;
    } u;
};

struct Exp {
    Expalt alt;
    union {
        Value literal;
        Name var;
        struct { Name name; Exp exp; } set;
        struct { Exp cond; Exp true; Exp false; } ifx;
        struct { Exp cond; Exp body; } whilex;
        Explist begin;
        struct { Exp fn; Explist actuals; } apply;
        struct { Letkeyword let; Namelist nl; Explist el; Exp body; } letx;
        Lambda lambdax;
    } u;
};

struct XDef {
    XDefalt alt; union { Def def; Name use; UnitTest test; } u;
};

struct UnitTest {
    UnitTestalt alt;
    union {
        struct { Exp check; Exp expect; } check_expect; Exp check_error;
    } u;
};

/* structure definitions for \uscheme (generated by a script) */
struct Explist {
	Exp hd;
	Explist tl;
};

struct UnitTestlist {
	UnitTest hd;
	UnitTestlist tl;
};

struct Parlist {
	Par hd;
	Parlist tl;
};

struct Valuelist {
	Value hd;
	Valuelist tl;
};

struct Namelist {
	Name hd;
	Namelist tl;
};

/* shared function prototypes 32b */
Name strtoname(const char *s);
const char *nametostr(Name n);
/* shared function prototypes 32c */
Printer printname;
/* shared function prototypes 34d */
char *readline(Reader r, const char *prompt);
/* shared function prototypes 34e */
Reader stringreader(const char *stringname, const char *s);
Reader filereader  (const char *filename,   FILE *fin);
/* shared function prototypes 34g */
XDef readxdef(XDefreader r);
/* shared function prototypes 35a */
XDefreader xdefreader(Reader r, Prompts prompts);
/* shared function prototypes 37f */
void print (const char *fmt, ...);  /* print to standard output */
void fprint(FILE *output, const char *fmt, ...);  /* print to given file */
/* shared function prototypes 38b */
void installprinter(unsigned char c, Printer *fmt);
/* shared function prototypes 38c */
Printer printpercent, printstring, printdecimal;
/* shared function prototypes 38d */
void vprint(FILE *output, const char *fmt, va_list_box *box);
/* shared function prototypes 39b */
void error(const char *fmt, ...);
extern jmp_buf errorjmp;        /* longjmp here on error */
/* shared function prototypes 39c */
typedef enum ErrorMode { NORMAL, TESTING } ErrorMode;
void set_error_mode(ErrorMode mode);
extern jmp_buf testjmp;
/* shared function prototypes 39d */
void checkargc(Exp e, int expected, int actual);
/* shared function prototypes 39e */
Name duplicatename(Namelist names);
/* shared function prototypes 49d */
void report_test_results(int npassed, int ntests);
/* shared function prototypes 683e */
Printer printpar;
/* shared function prototypes 683f */
Parlist readparlist(Reader r, int doquote, Prompts prompts);
/* shared function prototypes 689f */
extern int checkoverflow(int limit);
/* shared function prototypes (generated by a script) */
Par mkAtom(Name atom);
Par mkList(Parlist list);
struct Par mkAtomStruct(Name atom);
struct Par mkListStruct(Parlist list);
/* function prototypes for \uscheme (generated by a script) */
Lambda mkLambda(Namelist formals, Exp body);
Value mkNil(void);
Value mkBool(int bool);
Value mkNum(int num);
Value mkSym(Name sym);
Value mkPair(Value *car, Value *cdr);
Value mkClosure(Lambda lambda, Env env);
Value mkPrimitive(int tag, Primitive *function);
/* function prototypes for \uscheme (generated by a script) */
Def mkVal(Name name, Exp exp);
Def mkExp(Exp exp);
Def mkDefine(Name name, Lambda lambda);
struct Def mkValStruct(Name name, Exp exp);
struct Def mkExpStruct(Exp exp);
struct Def mkDefineStruct(Name name, Lambda lambda);
Exp mkLiteral(Value literal);
Exp mkVar(Name var);
Exp mkSet(Name name, Exp exp);
Exp mkIfx(Exp cond, Exp true, Exp false);
Exp mkWhilex(Exp cond, Exp body);
Exp mkBegin(Explist begin);
Exp mkApply(Exp fn, Explist actuals);
Exp mkLetx(Letkeyword let, Namelist nl, Explist el, Exp body);
Exp mkLambdax(Lambda lambdax);
struct Exp mkLiteralStruct(Value literal);
struct Exp mkVarStruct(Name var);
struct Exp mkSetStruct(Name name, Exp exp);
struct Exp mkIfxStruct(Exp cond, Exp true, Exp false);
struct Exp mkWhilexStruct(Exp cond, Exp body);
struct Exp mkBeginStruct(Explist begin);
struct Exp mkApplyStruct(Exp fn, Explist actuals);
struct Exp mkLetxStruct(Letkeyword let, Namelist nl, Explist el, Exp body);
struct Exp mkLambdaxStruct(Lambda lambdax);
XDef mkDef(Def def);
XDef mkUse(Name use);
XDef mkTest(UnitTest test);
struct XDef mkDefStruct(Def def);
struct XDef mkUseStruct(Name use);
struct XDef mkTestStruct(UnitTest test);
UnitTest mkCheckExpect(Exp check, Exp expect);
UnitTest mkCheckError(Exp check_error);
struct UnitTest mkCheckExpectStruct(Exp check, Exp expect);
struct UnitTest mkCheckErrorStruct(Exp check_error);
/* function prototypes for \uscheme (generated by a script) */
int     lengthEL (Explist l);
Exp     nthEL    (Explist l, unsigned n);
Explist mkEL     (Exp hd, Explist tl);
Explist popEL     (Explist l);
Printer printexplist;
/* function prototypes for \uscheme (generated by a script) */
int          lengthUL (UnitTestlist l);
UnitTest     nthUL    (UnitTestlist l, unsigned n);
UnitTestlist mkUL     (UnitTest hd, UnitTestlist tl);
UnitTestlist popUL     (UnitTestlist l);
Printer      printunittestlist;
/* function prototypes for \uscheme (generated by a script) */
int     lengthPL (Parlist l);
Par     nthPL    (Parlist l, unsigned n);
Parlist mkPL     (Par hd, Parlist tl);
Parlist popPL     (Parlist l);
Printer printparlist;
/* function prototypes for \uscheme (generated by a script) */
int       lengthVL (Valuelist l);
Value     nthVL    (Valuelist l, unsigned n);
Valuelist mkVL     (Value hd, Valuelist tl);
Valuelist popVL     (Valuelist l);
Printer   printvaluelist;
/* function prototypes for \uscheme (generated by a script) */
int      lengthNL (Namelist l);
Name     nthNL    (Namelist l, unsigned n);
Namelist mkNL     (Name hd, Namelist tl);
Namelist popNL     (Namelist l);
Printer  printnamelist;
/* function prototypes for \uscheme 140b */
Value *find(Name name, Env env);
/* function prototypes for \uscheme 140c */
Env bindalloc    (Name name,   Value v,      Env env);
Env bindalloclist(Namelist nl, Valuelist vl, Env env);
/* function prototypes for \uscheme 140d */
Value *allocate(Value v);
/* function prototypes for \uscheme 140e */
void initallocate(void);
/* function prototypes for \uscheme 141a */
Value truev, falsev;
/* function prototypes for \uscheme 141b */
void initvalue(void);
/* function prototypes for \uscheme 141c */
int istrue(Value v);
/* function prototypes for \uscheme 141d */
Value unspecified(void);
/* function prototypes for \uscheme 141e */
Value eval   (Exp e, Env rho);
Env   evaldef(Def d, Env rho, Echo echo);
/* function prototypes for \uscheme 141f */
void readevalprint(XDefreader r, Env *envp, Echo echo);
/* function prototypes for \uscheme 141g */
Env primenv(void);
/* function prototypes for \uscheme 142a */
void printenv    (FILE *output, va_list_box*);
void printvalue  (FILE *output, va_list_box*);
void printclosure(FILE *output, va_list_box*);
void printexp    (FILE *output, va_list_box*);
void printdef    (FILE *output, va_list_box*);
void printlambda (FILE *output, va_list_box*);
/* function prototypes for \uscheme 712c */
int tests_passed(UnitTestlist tests, Env rho);
/* function prototypes for \uscheme 714e */
int equalpairs(Value v, Value w);
